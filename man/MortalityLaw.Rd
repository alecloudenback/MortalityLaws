% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fun_Fit.R
\name{MortalityLaw}
\alias{MortalityLaw}
\title{Fit mortality law}
\usage{
MortalityLaw(x, mx = NULL, qx = NULL, Dx = NULL, Ex = NULL,
  law = NULL, opt.method = "poissonL", parS = NULL, fit.this.x = x,
  custom.law = NULL, show_pb = TRUE)
}
\arguments{
\item{x}{Vector of ages}

\item{mx}{Vector of age-specific death rates}

\item{qx}{Vector of age-specific probabilities of death}

\item{Dx}{Vector containing death counts}

\item{Ex}{Vector containing the exposed population}

\item{law}{The name of the mortality law/model to be fitted. e.g. \code{gompertz}, 
\code{makeham}, ... To investigate all the possible options see \code{\link{availableLaws}}
function.}

\item{opt.method}{How would you like to find the parameters? Specify the function 
to be optimize. Available options: the Poisson likelihood function 
\code{poissonL}; the Binomial likelihood function -\code{binomialL}; 
and other 6 loss functions. For more details check \code{\link{availableLF}} function.}

\item{parS}{Starting parameters used in optimization process (optional).}

\item{fit.this.x}{select the ages to be considered in model fitting. By default 
\code{fit.this.x = x}. One may want exclude from the fitting procedure say the 
advance ages were the data is sparse.}

\item{custom.law}{This argument allows you to fit a model that is not defined 
in the package. Accepts as input a function.}

\item{show_pb}{Choose whether to display a progress bar during the fitting process. 
Logical. Default value: \code{TRUE}.}
}
\value{
A \code{MortalityLaw} object
}
\description{
This function can be used to fit mortality models given a set of data. 
Using the argument \code{law} one can specify the model to be fitted. 
So far there are more than 20 parametric model implemented.
}
\examples{
library(MortalityLaws)

# Example 1: ---------------------------------------
# Fit Makeham model for year of 1950.

yr <- 1950
ages  <- 45:75
Dx <- ahmd$Dx[paste(ages), paste(yr)]
Ex <- ahmd$Ex[paste(ages), paste(yr)]

model1 <- MortalityLaw(x = ages, Dx = Dx, Ex = Ex, law = 'makeham')

model1
ls(model1)
summary(model1)
plot(model1)

# we can fit the same model using diffrent data and a different optimization procedure
mx <- ahmd$mx[paste(ages), paste(yr)]
model1.1 <- MortalityLaw(x = ages, mx = mx, law = 'makeham', opt.method = 'LF1')

# Example 2: ---------------------------------------
# Now let's fit a mortality law that is not defined in the package, say a
# reparametrize Gompertz in terms of modal age at death
# hx = b*exp(b*(x-m))  (here b and m are the parameters to be estimated)

my_gompertz <- function(x, par = c(b = 0.13, m = 45)){
  hx  <- with(as.list(par), b*exp(b*(x - m)) )
  return(as.list(environment())) # return everything inside this function
}

model2 <- MortalityLaw(x = ages, Dx = Dx, Ex = Ex, custom.law = my_gompertz)
summary(model2)
plot(model2)

# Example 3: ---------------------------------------
# Fit Heligman-Pollard model for every single year in the dataset between age 0 and 100.

ages  <- 0:100
mx <- ahmd$mx[paste(ages), ] # select data
qx <- convertFx(mx, x = ages, type = 'mx', output = 'qx') # transform mx into qx

model3 = MortalityLaw(x = ages, qx = qx, law = 'HP', opt.method = 'LF2') # fit qx values
model3


}
